package Pages.Customer;
import Enum.TransactionType;
import FileManager.*;
import Models.*;
import Records.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class ViewMenuFrame extends javax.swing.JFrame {
    
    private Customer customer;
    private String selectedVendorID;
    private String selectedOrderType = null;
    
    public ViewMenuFrame() {
        this.customer = (Customer) CurrentUser.getLoggedInUser();
        initComponents();
        BalanceLabel.setText("Balance: " + CurrentUser.getLoggedInUser().getBalance());
        loadVendorList();
        setupOrderSummaryTable();
        setOrderSummaryTableeSelectionListener();
        setupOrderTableModelListiner();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Admin = new javax.swing.JLabel();
        BalanceLabel = new javax.swing.JLabel();
        UserPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        vendorListTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        selectedVendorField = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        vendorMenuTable = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderSummaryTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        orderAmountField = new javax.swing.JFormattedTextField();
        dineInButton = new javax.swing.JButton();
        takeAwayButton = new javax.swing.JButton();
        deliveryButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        extraChargesField = new javax.swing.JFormattedTextField();
        totalAmountField = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        placeOrderButton = new javax.swing.JButton();
        selectedFoodField = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        foodQuantity = new javax.swing.JSpinner();
        addToOrderButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        foodToRemove = new javax.swing.JFormattedTextField();
        removeItemButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(740, 740));

        MainPanel.setPreferredSize(new java.awt.Dimension(740, 700));
        MainPanel.setRequestFocusEnabled(false);
        MainPanel.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(470, 35));

        Admin.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Admin.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Admin.setText("Customer Dashboard");
        Admin.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        Admin.setPreferredSize(new java.awt.Dimension(400, 25));
        Admin.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        BalanceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BalanceLabel.setText("Balance: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Admin, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 371, Short.MAX_VALUE)
                .addComponent(BalanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Admin, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BalanceLabel)
                .addContainerGap())
        );

        MainPanel.add(jPanel2, java.awt.BorderLayout.NORTH);

        UserPanel.setPreferredSize(new java.awt.Dimension(440, 215));

        jLabel6.setText("Search");

        searchField.setPreferredSize(new java.awt.Dimension(100, 25));
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Vendors");

        vendorListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        vendorListTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(vendorListTable);

        jLabel9.setText("Selected Vendor");

        selectedVendorField.setPreferredSize(new java.awt.Dimension(120, 25));
        selectedVendorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedVendorFieldActionPerformed(evt);
            }
        });

        vendorMenuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(vendorMenuTable);

        jLabel2.setText("Order Summary");

        orderSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(orderSummaryTable);

        jLabel3.setText("Order Amount");

        orderAmountField.setPreferredSize(new java.awt.Dimension(80, 25));
        orderAmountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderAmountFieldActionPerformed(evt);
            }
        });

        dineInButton.setText("Dine-in");
        dineInButton.setPreferredSize(new java.awt.Dimension(100, 25));
        dineInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dineInButtonActionPerformed(evt);
            }
        });

        takeAwayButton.setText("Take-away");
        takeAwayButton.setPreferredSize(new java.awt.Dimension(100, 25));
        takeAwayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeAwayButtonActionPerformed(evt);
            }
        });

        deliveryButton.setText("Delivery");
        deliveryButton.setPreferredSize(new java.awt.Dimension(100, 25));
        deliveryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Extra Charges");

        extraChargesField.setPreferredSize(new java.awt.Dimension(80, 25));

        totalAmountField.setPreferredSize(new java.awt.Dimension(5, 25));
        totalAmountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmountFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Total Amount");

        placeOrderButton.setText("Place Order");
        placeOrderButton.setPreferredSize(new java.awt.Dimension(100, 25));
        placeOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeOrderButtonActionPerformed(evt);
            }
        });

        selectedFoodField.setPreferredSize(new java.awt.Dimension(104, 25));

        jLabel7.setText("Food");

        jLabel8.setText("Quantity");

        foodQuantity.setPreferredSize(new java.awt.Dimension(27, 25));

        addToOrderButton.setText("Add to Order");
        addToOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToOrderButtonActionPerformed(evt);
            }
        });

        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Selected Item");

        foodToRemove.setPreferredSize(new java.awt.Dimension(100, 25));
        foodToRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodToRemoveActionPerformed(evt);
            }
        });

        removeItemButton.setText("Remove");
        removeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UserPanelLayout = new javax.swing.GroupLayout(UserPanel);
        UserPanel.setLayout(UserPanelLayout);
        UserPanelLayout.setHorizontalGroup(
            UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator2)
            .addGroup(UserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserPanelLayout.createSequentialGroup()
                        .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(foodToRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(UserPanelLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(removeItemButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(UserPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(orderAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(UserPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(extraChargesField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(UserPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(24, 24, 24)
                                        .addComponent(totalAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(UserPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(UserPanelLayout.createSequentialGroup()
                                        .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel7))
                                        .addGap(40, 40, 40)
                                        .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(selectedFoodField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(foodQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserPanelLayout.createSequentialGroup()
                                        .addComponent(addToOrderButton)
                                        .addGap(39, 39, 39))))
                            .addGroup(UserPanelLayout.createSequentialGroup()
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(returnButton)))
                        .addContainerGap())
                    .addGroup(UserPanelLayout.createSequentialGroup()
                        .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(selectedVendorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(UserPanelLayout.createSequentialGroup()
                        .addComponent(dineInButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(takeAwayButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deliveryButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(placeOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))))
        );
        UserPanelLayout.setVerticalGroup(
            UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedVendorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(UserPanelLayout.createSequentialGroup()
                                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel3)
                                    .addComponent(orderAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(extraChargesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                    .addComponent(foodToRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(totalAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(removeItemButton))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dineInButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(takeAwayButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deliveryButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(placeOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(UserPanelLayout.createSequentialGroup()
                        .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectedFoodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(foodQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(27, 27, 27)
                        .addComponent(addToOrderButton)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        MainPanel.add(UserPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(MainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed

    }//GEN-LAST:event_searchFieldActionPerformed

    private void selectedVendorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedVendorFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedVendorFieldActionPerformed

    private void totalAmountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmountFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalAmountFieldActionPerformed

    // Place order button includes creation of new transaction record, order record and delivery record if applicable
    private void placeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeOrderButtonActionPerformed
        DefaultTableModel orderModel = (DefaultTableModel) orderSummaryTable.getModel();
        
        if (orderModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Your order is empty. Please add items to your order.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (selectedOrderType == null || selectedOrderType.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select an order type.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String extraChargesText = extraChargesField.getText();
        double extraCharges;
        
        // checking if extraChargesField is empty, if empty then proceed
        try {
            if (extraChargesText == null || extraChargesText.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please select an order type (Dine-In, Takeaway, or Delivery).", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            extraCharges = Double.parseDouble(extraChargesText.trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid extra charges value.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double orderAmount = 0.0;
        ArrayList<OrderItem> items = new ArrayList<>();
        
        // Going through foodItems in orderSummaryTable and sum up prices of all items
        for (int i = 0; i < orderModel.getRowCount(); i++) {
            String foodName = (String) orderModel.getValueAt(i, 0);
            int quantity = (int) orderModel.getValueAt(i, 1);
            double totalAmount = (double) orderModel.getValueAt(i, 2);
            double price = totalAmount / quantity;
            items.add(new OrderItem(foodName, quantity, price));
            
            orderAmount += totalAmount;
        }
        
        // Final Amount of order including extraCharges
        double totalAmount = orderAmount + extraCharges;
        
        // confirmation pop-up 
        int confirm = JOptionPane.showConfirmDialog(null, "The total amount of is RM " + String.format("%.2f", totalAmount) 
                + ". Do you want to place the order?", "Confirm Order", JOptionPane.YES_NO_OPTION);
        
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        
        String customerID = CurrentUser.getLoggedInUser().getUid();
        Customer customer = (Customer) CurrentUser.getLoggedInUser();
        
        // deducting customer credit balance with final order amount
        boolean deductSuccess = customer.deductCredit(totalAmount);
        
        if (!deductSuccess) {
            JOptionPane.showMessageDialog(null, "Insufficient balance. Please top up and try again.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Updating customer balance after placing order and write update users ArrayList
        ArrayList<User> users = FileManager.loadUsers("users.txt");
        for (User user : users) {
            if (user.getUid().equals(customerID) && user instanceof Customer) {
                ((Customer) user).setBalance(customer.getBalance());
                break;
            }
        }
        FileManager.writeUsers("users.txt", users);
        
        // Getting details for creating new order and adding new order to orders.txt
        String orderID = generateOrderID();
        String vendorID = selectedVendorID;
        String orderType = selectedOrderType;
        String date = FileManager.getDateTime();
        
        // Create new order and write to orders.txt
        Order order = new Order(orderID, customerID, vendorID, items, orderType, orderAmount, date, "Pending", "Unassigned");
        
        // Create new delivery record if customer choose delivery option
        if (orderType.equalsIgnoreCase("Delivery")) {
            if (!handleDelivery(order, extraCharges)) {
                return;
            } 
        }
        FileManager.addNewOrder("orders.txt", order);
        
        ArrayList<Transaction> txns = FileManager.loadTxns("transactions.txt");
        
        // Getting details for transaction record and updateing transactions.txt
        String txnID = FileManager.getTxnID(txns);
        Transaction txn = new Transaction(txnID, customerID, TransactionType.ORDER_DEDUCTION, totalAmount, date);
        txns.add(txn);
        FileManager.writeTxns("transactions.txt", txns);
        
        JOptionPane.showMessageDialog(null, "Order placed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        BalanceLabel.setText("Balance: " + CurrentUser.getLoggedInUser().getBalance());
        
        orderModel.setRowCount(0);
        extraChargesField.setText("0.00");
        totalAmountField.setText("0.00");
        selectedOrderType = null;
    }//GEN-LAST:event_placeOrderButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        new CustomerFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_returnButtonActionPerformed

    // add to order button from vendor's menu to order table
    private void addToOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToOrderButtonActionPerformed
        
        int selectedRow = vendorMenuTable.getSelectedRow();
        
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a food item.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Formatting text field with chose foodItem with quantiy to OrderSummaryTable
        String foodName = (String) vendorMenuTable.getValueAt(selectedRow, 0);
        int quantity = (int) foodQuantity.getValue();
        double amount = ((double) vendorMenuTable.getValueAt(selectedRow, 2)) * quantity;
        
        if (quantity <= 0) {
            JOptionPane.showMessageDialog(null, "Please select a valid quantity.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DefaultTableModel orderModel = (DefaultTableModel) orderSummaryTable.getModel();
        
        orderModel.addRow(new Object[]{foodName, quantity, amount});
        foodQuantity.setValue(1);
    }//GEN-LAST:event_addToOrderButtonActionPerformed

    private void foodToRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodToRemoveActionPerformed
       
    }//GEN-LAST:event_foodToRemoveActionPerformed
    
    // Remove item from order button
    private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed
        int selectedRow = orderSummaryTable.getSelectedRow();
        
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select an item to remove.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Remove item from OrderSummaryTable
        DefaultTableModel orderModel = (DefaultTableModel) orderSummaryTable.getModel();
        orderModel.removeRow(selectedRow);
        
        // reset fields
        if (orderModel.getRowCount() == 0) {
            foodToRemove.setText("");
            extraChargesField.setText("");
            totalAmountField.setText("");
        }
    }//GEN-LAST:event_removeItemButtonActionPerformed

    // Buttons for setting extra charges
    private void dineInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dineInButtonActionPerformed
        extraChargesField.setText("0.00");
        selectedOrderType = "Dine-in";
        updateTotalAmount();
    }//GEN-LAST:event_dineInButtonActionPerformed

    private void takeAwayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeAwayButtonActionPerformed
        extraChargesField.setText("0.00");
        selectedOrderType = "Takeaway";
        updateTotalAmount();
    }//GEN-LAST:event_takeAwayButtonActionPerformed

    private void deliveryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryButtonActionPerformed
        extraChargesField.setText("5.00");
        selectedOrderType = "Delivery";
        updateTotalAmount();
    }//GEN-LAST:event_deliveryButtonActionPerformed

    // method to update extra charges
    private void updateTotalAmount() {
        DefaultTableModel orderModel = (DefaultTableModel) orderSummaryTable.getModel();
        double orderAmount = 0.0;

        for (int i = 0; i < orderModel.getRowCount(); i++) {
            orderAmount += (double) orderModel.getValueAt(i, 2);
        }

        double extraCharges = Double.parseDouble(extraChargesField.getText());
        double totalAmount = orderAmount + extraCharges;
        
        totalAmountField.setText(String.format("%.2f", totalAmount));
        totalAmountField.setEditable(false);
        orderAmountField.setEditable(false);
        extraChargesField.setEditable(false);
    }
    
    private void orderAmountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderAmountFieldActionPerformed

    }//GEN-LAST:event_orderAmountFieldActionPerformed
    
    // Below are methods for table setups and loading data into ArrayList
    private void loadVendorList() {
        
        ArrayList<Cuisine> cuisines = FileManager.loadCuisines("cuisines.txt");
        
        String[] columnNames = {"VendorID", "Vendor Name", "Cuisine Type"};
        int[] columnWidths = {0, 150, 150};
        
        setupTable(vendorListTable, columnNames, columnWidths);
        
        DefaultTableModel vendorModel = (DefaultTableModel) vendorListTable.getModel();
        
        for (Cuisine cuisine : cuisines) {
            vendorModel.addRow(new Object[]{cuisine.getVendorID(), cuisine.getVendorname(), cuisine.getCuisine()});
        }
        
        vendorListTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && vendorListTable.getSelectedRow() != -1) {
                
                clearOrderSummaryTable();
                selectedFoodField.setText("");
               
                int selectedRow = vendorListTable.getSelectedRow();
                String vendorID = (String) vendorListTable.getValueAt(selectedRow, 0);
                String vendorName = (String) vendorListTable.getValueAt(selectedRow, 1);
                
                loadVendorItems(vendorID, vendorName);
            }
        });
    }
    
    private void loadVendorItems(String vid, String vendorName) {
        
        selectedVendorID = vid;
        selectedVendorField.setText(vendorName);
        
        ArrayList<Food> foodItems = FileManager.loadFoodItems("foodItems.txt");
        
        ArrayList<Food> vendorItems = new ArrayList<>();
        for (Food food : foodItems) {
            if (food.getVendorID().equals(vid)) {
                vendorItems.add(food);
            }
        }
        
        String[] columnNames = {"Food", "Description", "Price"};
        int[] columnWidths = {100 ,400, 70};
        
        setupTable(vendorMenuTable, columnNames, columnWidths);
        
        DefaultTableModel foodModel = (DefaultTableModel) vendorMenuTable.getModel();
        
        for (Food food : vendorItems) {
            foodModel.addRow(new Object[]{
                food.getFoodName(),
                food.getDescription(),
                food.getPrice()
            });
        }
        
        vendorMenuTable.getSelectionModel().addListSelectionListener(e -> {
           if (!e.getValueIsAdjusting() && vendorMenuTable.getSelectedRow() != -1) {
               int selectedRow = vendorMenuTable.getSelectedRow();
               
               String foodName = (String) vendorMenuTable.getValueAt(selectedRow, 0);
               selectedFoodField.setText(foodName);
               selectedFoodField.setEditable(false);
               foodQuantity.setValue(1);
           }
        });
    }
    
    private void setupTable(JTable table, String[] columnNames, int[] columnWidths) {
        
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        table.setModel(model);
        table.setDefaultEditor(Object.class, null);
        table.setAutoCreateRowSorter(true);
        
        if (columnWidths != null && table.getColumnModel().getColumnCount() == columnWidths.length) {
            for (int i = 0; i < columnWidths.length; i++) {
                if (columnWidths[i] == 0) {
                    
                    table.getColumnModel().getColumn(i).setMinWidth(0);
                    table.getColumnModel().getColumn(i).setMaxWidth(0);
                    table.getColumnModel().getColumn(i).setPreferredWidth(0);
                } else {
                    
                    table.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
                    table.getColumnModel().getColumn(i).setMinWidth(columnWidths[i]);
                }
            }
        }
    }
    
    // Method for setting up OrderSummaryTable
    private void setupOrderSummaryTable() {
        String[] columnNames = {"Food Name", "Quantity", "Amount"};
        int[] columnWidths = {80, 80, 80};
        
        setupTable(orderSummaryTable, columnNames, columnWidths);
    }
    
    private void setupOrderTableModelListiner() {
        DefaultTableModel orderModel = (DefaultTableModel) orderSummaryTable.getModel();
        
        orderModel.addTableModelListener(e -> {
            updateOrderAmountText(); 
        });
    }
    
    private void setOrderSummaryTableeSelectionListener() {
        orderSummaryTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && orderSummaryTable.getSelectedRow() != -1) {
                int selectedRow = orderSummaryTable.getSelectedRow();
                String foodName = (String) orderSummaryTable.getValueAt(selectedRow, 0);
                foodToRemove.setText(foodName);
                foodToRemove.setEditable(false);
            }
        });
    }
    
    private void clearOrderSummaryTable() {
        DefaultTableModel orderModel = (DefaultTableModel) orderSummaryTable.getModel();
        orderModel.setRowCount(0); 
        
        foodToRemove.setText("");
        extraChargesField.setText("0.00");
        totalAmountField.setText("0.00");
    }
    
    private double calculateOrderAmount() {
        DefaultTableModel orderModel = (DefaultTableModel) orderSummaryTable.getModel();
        double orderAmount = 0.0;
        
        for (int i = 0; i < orderModel.getRowCount(); i++) {
            orderAmount += (double) orderModel.getValueAt(i, 2);
        }
        return orderAmount;
    }
    
    private void updateOrderAmountText() {
        double orderAmount = calculateOrderAmount();
        orderAmountField.setText(String.valueOf(orderAmount));
        orderAmountField.setEditable(false);
    }

    // Method for generating IDs
    private String generateOrderID() {
        ArrayList<Order> existingOrders = FileManager.loadOrders("orders.txt");
        int lastOrderID = 0;
        
        for (Order order : existingOrders) {
            String orderID = order.getOrderID();
            int orderNum = Integer.parseInt(orderID.substring(1));
            
            if (orderNum > lastOrderID) {
                lastOrderID = orderNum;
            }
        }
        return "O" + (lastOrderID + 1);
    }
    
    // Method to create delivery record if customer choose delivery option
    // Called when placeOrderButton is clicked
    private boolean handleDelivery(Order order, double deliveryCharges) {
        
        String deliveryID = FileManager.generateDeliveryID();
        String deliveryAddress = JOptionPane.showInputDialog(null, "Please enter delivery address:", "Delivery Address", JOptionPane.QUESTION_MESSAGE);
        
        if (deliveryAddress == null || deliveryAddress.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Delivery Address is required.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        Delivery delivery = new Delivery(deliveryID, order.getOrderID(), order.getCustomerID(), deliveryCharges, deliveryAddress, "pending", "unassigned", "pending", "N/A", "N/A");
        FileManager.appendDeliveries("deliveries.txt", delivery);
        
        return true;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewMenuFrame frame = new ViewMenuFrame();
                frame.setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Admin;
    private javax.swing.JLabel BalanceLabel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JPanel UserPanel;
    private javax.swing.JButton addToOrderButton;
    private javax.swing.JButton deliveryButton;
    private javax.swing.JButton dineInButton;
    private javax.swing.JFormattedTextField extraChargesField;
    private javax.swing.JSpinner foodQuantity;
    private javax.swing.JFormattedTextField foodToRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JFormattedTextField orderAmountField;
    private javax.swing.JTable orderSummaryTable;
    private javax.swing.JButton placeOrderButton;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JFormattedTextField selectedFoodField;
    private javax.swing.JFormattedTextField selectedVendorField;
    private javax.swing.JButton takeAwayButton;
    private javax.swing.JFormattedTextField totalAmountField;
    private javax.swing.JTable vendorListTable;
    private javax.swing.JTable vendorMenuTable;
    // End of variables declaration//GEN-END:variables
}
