/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Pages.Manager;

import FileManager.CurrentUser;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chew WB
 */
public class CustomerComplaintsFrame extends javax.swing.JFrame {

    /**
     * Creates new form CustomerComplaintsFrame
     */
    public CustomerComplaintsFrame() {
        initComponents();
        refreshData(); // Load data when the frame is initialized

        // Add a mouse listener to the table to populate the text area when a row is selected
        ComplaintHistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = ComplaintHistoryTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Get the comment from the selected row and display it in the text area
                    String comment = ComplaintHistoryTable.getValueAt(selectedRow, 3).toString(); // Assuming the comment is in the fourth column
                    ComplaintInfoText.setText(comment);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ComplaintHistoryTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        UpdateCommentButton = new javax.swing.JButton();
        ResolvedButton = new javax.swing.JButton();
        OptionLabel = new javax.swing.JLabel();
        ComplaintPageReturnButton = new javax.swing.JButton();
        ReplyLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ComplaintInfoText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        ComplaintHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Status", "Details", "Reply"
            }
        ));
        jScrollPane1.setViewportView(ComplaintHistoryTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("Customer Complaint Management Dashboard");

        UpdateCommentButton.setBackground(new java.awt.Color(225, 237, 243));
        UpdateCommentButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        UpdateCommentButton.setText("Update");
        UpdateCommentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateCommentButtonActionPerformed(evt);
            }
        });

        ResolvedButton.setBackground(new java.awt.Color(225, 237, 243));
        ResolvedButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ResolvedButton.setText("Resolved");
        ResolvedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResolvedButtonActionPerformed(evt);
            }
        });

        OptionLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        OptionLabel.setText("Options:");

        ComplaintPageReturnButton.setBackground(new java.awt.Color(225, 237, 243));
        ComplaintPageReturnButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ComplaintPageReturnButton.setText("Return");
        ComplaintPageReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComplaintPageReturnButtonActionPerformed(evt);
            }
        });

        ReplyLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ReplyLabel.setText("Reply:");

        ComplaintInfoText.setColumns(20);
        ComplaintInfoText.setRows(5);
        jScrollPane2.setViewportView(ComplaintInfoText);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ReplyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(UpdateCommentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ResolvedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ComplaintPageReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OptionLabel))
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(62, 62, 62))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OptionLabel)
                    .addComponent(ReplyLabel))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(UpdateCommentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ResolvedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ComplaintPageReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshData() {
    DefaultTableModel model = (DefaultTableModel) ComplaintHistoryTable.getModel();
    model.setRowCount(0); // Clear existing data

    // Load complaints from the file (assuming a file named "complaints.txt")
    try (BufferedReader br = new BufferedReader(new FileReader("complaint.txt"))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] data = line.split(":"); // Assuming data is separated by colons
            if (data.length >= 6) { // Ensure there are enough fields
                model.addRow(new Object[]{data[0], data[1], data[4], data[3]}); // ID, Status, Details, Reply
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error loading complaints: " + e.getMessage());
    }
}
    
    private void UpdateCommentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateCommentButtonActionPerformed
        // Get the selected row from the table
        int selectedRow = ComplaintHistoryTable.getSelectedRow();
        
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a complaint to update.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get the complaint ID from the selected row
        String complaintID = ComplaintHistoryTable.getValueAt(selectedRow, 0).toString(); // Assuming ID is in the first column
        String newComment = ComplaintInfoText.getText().trim(); // Get the new comment from the text area

        if (newComment.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a comment.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Update the complaint in the data source (e.g., a file)
        try {
            // Read the existing complaints
            BufferedReader br = new BufferedReader(new FileReader("complaint.txt"));
            StringBuilder updatedData = new StringBuilder();
            String line;
            boolean found = false;

            while ((line = br.readLine()) != null) {
                String[] data = line.split(":");
                if (data.length >= 6) {
                    if (data[0].equals(complaintID)) { // Check if this is the complaint to update
                        // Update the comment (assuming it's in the fourth column)
                        data[3] = newComment; // Update the reply/comment
                        found = true;
                    }
                    // Append the updated or original line to the StringBuilder
                    updatedData.append(String.join(":", data)).append("\n");
                }
            }
            br.close();

            if (found) {
                // Write the updated data back to the file
                FileWriter fw = new FileWriter("complaint.txt");
                fw.write(updatedData.toString());
                fw.close();
                JOptionPane.showMessageDialog(null, "Comment updated successfully!");
                refreshData(); // Refresh the table to show updated comments
            } else {
                JOptionPane.showMessageDialog(null, "Complaint ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error updating comment: " + e.getMessage());
        }               
    }//GEN-LAST:event_UpdateCommentButtonActionPerformed

    private void ResolvedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResolvedButtonActionPerformed
        // Get the selected row from the table
    int selectedRow = ComplaintHistoryTable.getSelectedRow();
    
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a complaint to resolve.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Get the complaint ID from the selected row
    String complaintID = ComplaintHistoryTable.getValueAt(selectedRow, 0).toString(); // Assuming ID is in the first column
    
    // Update the complaint status in the data source
    try {
        // Read the existing complaints
        BufferedReader br = new BufferedReader(new FileReader("complaint.txt"));
        StringBuilder updatedData = new StringBuilder();
        String line;
        boolean found = false;

        while ((line = br.readLine()) != null) {
            String[] data = line.split(":");
            if (data.length >= 4) {
                if (data[0].equals(complaintID)) { // Check if this is the complaint to resolve
                    // Update the status to "Resolved" (assuming status is in the second column)
                    data[1] = "Resolved"; // Change the status
                    found = true;
                }
                // Append the updated or original line to the StringBuilder
                updatedData.append(String.join(":", data)).append("\n");
            }
        }
        br.close();
        
        if (found) {
            // Write the updated data back to the file
            FileWriter fw = new FileWriter("complaint.txt");
            fw.write(updatedData.toString());
            fw.close();
            JOptionPane.showMessageDialog(null, "Complaint resolved successfully!");
            refreshData(); // Refresh the table to show updated status
        } else {
            JOptionPane.showMessageDialog(null, "Complaint ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error resolving complaint: " + e.getMessage());
    }
    }//GEN-LAST:event_ResolvedButtonActionPerformed

    private void ComplaintPageReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComplaintPageReturnButtonActionPerformed
        ManagerFrame managerFrame = new ManagerFrame();
        managerFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ComplaintPageReturnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerComplaintsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerComplaintsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerComplaintsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerComplaintsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerComplaintsFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ComplaintHistoryTable;
    private javax.swing.JTextArea ComplaintInfoText;
    private javax.swing.JButton ComplaintPageReturnButton;
    private javax.swing.JLabel OptionLabel;
    private javax.swing.JLabel ReplyLabel;
    private javax.swing.JButton ResolvedButton;
    private javax.swing.JButton UpdateCommentButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
